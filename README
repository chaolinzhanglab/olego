OLego -- short or long RNA-seq read mapping to discover exon junction

Jie Wu (wuj@cshl.edu), Chaolin Zhang (czhang@rockefeller.edu)

May 15 2012

This is an initial version of the manual and please check regularly for updates! 


What is OLego?
======================

OLego is a program specifically designed for de novo spliced mapping of mRNA-seq reads. OLego adopts a seed-and-extend scheme, and does not rely on a separate external mapper. It achieves high sensitivity of junction detection by strategic searches with very small seeds (12-14 nt), efficiently mapped using Burrows-Wheeler transform (BWT) and FM-index. This also makes it particularly sensitive for discovering small exons. It is implemented in C++ with full support of multiple threading, to allow for fast processing of large-scale data.

OLego is an open source code project and released under GPLv3. The implementation of OLego relies heavily on BWA (version 0.5.9rc1, http://bio-bwa.sourceforge.net/).  It also uses some source code from the Jim Kent source code tree (http://genome.ucsc.edu/admin/git.html). 

Prerequisites
======================

The major programs of OLego (olego and olegoindex ) can be installed and ran on Unix-based system (Linux or MacOS) with GCC compiler installed. We provided set of scripts for post analysis and regression model construction, these codes may require Perl and R. 

Download
======================

The code and binary files can be found at http://sourceforge.net/projects/ngs-olego/files/ , we are regularly updating the code, so please check back often to keep your code updated. The code can also be reached via git::

	git clone git://git.code.sf.net/p/ngs-olego/code ngs-olego-code

The main programs of OLego (olego and olegoindex ) can be installed and run on Unix-based system with GCC compiler installed. We also provide set of scripts for post analysis and regression model construction. These codes may require Perl and R installed. 

Installation
======================

To compile OLego on your computer, please go to the OLego directory and type::

	make

If everything goes right, you will find two executable files olegoindex and olego in the folder.

We also provide binary executable files at http://sourceforge.net/projects/ngs-olego/files/ for x86_64 and i686 Linux system. 

Please feel free to report any problems you come up with.


Usage
======================

Build the index for the genome sequence
----------------------------------------

To run OLego, you need a BWT index for the reference sequences. We use exactly the same genome index used by BWA.  For your convience, you can build the index with olegoindex that comes with this package::

	olegoindex [-a bwtsw|div|is] [-c] <in.fasta>

Arguments:

	==========  ========================================================================
	<in.fasta>  This is the fasta format file with the reference sequence. Please put 
		    all the sequences (from different chromosomes ) in a single file.
	==========  ========================================================================
	
Options:

    ========    ==================================================================	
    Option	Description
    ========    ==================================================================
    -a		BWT construction algorithm: bwtsw or is [default: bwtsw]
    -p		prefix of the index [default: the same as the fasta file name]
    -c		build color-space index
    ========    ==================================================================
	
Caution: please use "-a bwtsw" for long genome (like human or mouse genome).

There will be 8 files (prefix.pac, prefix.ann, prefix.amb, prefix.rpac, prefix.bwt, prefix.rbwt, prefix.sa, prefix.rsa ) generated after olegoindex finishes.

Running OLego
----------------------

Now you can map your mRNA-seq reads to the genome with olego::

	olego [options] <prefix> <in.fastx>

The arguments and options are decribed as below:

Arguments:
^^^^^^^^^^^^^^^^^^^^^^

    =========== =============================================================================================
    Argument	Description
    ===========	=============================================================================================	
    <prefix>	The prefix of the genome sequence index, including the path and the base name. 
    <in.fastx>	Either fasta or fastq file would work as input.
    ===========	=============================================================================================

Basic options:
^^^^^^^^^^^^^^^^^^^^^^

    =====================   ===========================================================================
    Options		    Descriptions
    =====================   ===========================================================================
    -o,--output-file	    Name of the output file [ default: stdout ]. This file will be in SAM
			    format, with some customized tags. Please see the details of the file
			    format below. 
    -s,--single-anchor	    Enable single-anchor de-novo junction search. [ default: disabled ].
    -j --junction-file	    Annotation file for known exon junctions. It is in BED format and please 
			    see the junc format description below. 
    -n,--non-denovo	    No de novo junction search. Note that if junction annotation file is 
			    provided by -j, these "known" junctions will still be searched. 
    -t,--num-threads	    Number of threads (INT) [ default: 1 ]. OLego fully supports multiple
			    threading, if you have multiple CPU cores on your computer, please 
			    specify the number of CPUs you want to use with this option. 
    -r,--regression-model   The file with the parameters for the logistic regression model. The mouse 
			    model will be used if no file is selected. The model file contains the 
			    parameters for the regression model (the coefficients, the PWM and the 
			    background ). We have provided model files for mouse and human. User-defined
			    model can also be generated with the regression_model_gen for any species.
			    Please see the usage below. 
    -M,--max-total-diff	    Maximum total difference between query read and reference sequence. 
			    Either INT or FLOAT number can be used for this option. An INT number 
			    will specify the maximum total edit distance allowed for each alignment 
			    [ default: 4 ]. A FLOAT number will specify the fraction of missing 
			    alignments given 2% uniform base error rate [default: 0.04 ]. This
			    parameter is the same as -n in BWA. 
    -w,--word-size	    The size of the seed used in junction search (INT) [ default: 14 ]. 
			    The default seed size is recommended for reads >100 nt. For shorter
			    reads, a smaller number can be used. e.g., 12 nt for 36 nt reads. The 
			    seeds will be evenly distributed on the read from the start to the end,
			    so please try to cover the read as much as possible with a reasonable 
			    seed size. (13 nt for 36 nt reads is a BAD example. )
    -W,--max-word-occ	    Maximum number of matches of a seed (INT) [ default: 1000]. If a seed has
			    more than this number of hits on the genome, then it will be considerred 
			    repeptive and all of its hits will be discarded. 
    -m,--max-word-diff	    Maximum edit distance allowed for each seed (INT) [ default: 0 ]. 
			    Since our seed size is smaller than other programs, we recommend that 
			    the user use a small number for this option.  
    -I,--max-intron	    Maximum intron size for de novo junction search (INT) [ default: 500000 ].
    -i,--min-intron	    Minimum intron size for de novo junction search (INT) [ default: 20 ].
    -e,--min-exon	    Minimum micro-exon size to be searched (INT) [ default: 9 ].
    -a,--min-anchor	    Minimum anchor size in de novo single anchor junction searches (INT) 
			    [ default: 8 ]. We define "anchor size" as the smaller number of matched 
			    nucleotides on the read at the end of the junction. 
    -k,--known-min-anchor   Minimum anchor size in single-anchor junction searches when the junction
			    is in the annotation file specified by -j (INT) [ default: 5 ].
    -v,--verbose	    Verbose mode [ default: false ].
    =====================   ===========================================================================

Advanced options:
^^^^^^^^^^^^^^^^^^^^^^^^

    ======================  =================================================================================
    Option		    Description
    ======================  =================================================================================
    --min-logistic-prob	    Minimum logistic probablity for an alignment, calculated with the splice sites
			    motif and intron size, in the range of [0,1) [ default: 0.50]. A higher number
			    means more stringent filter, we don't recommend using high value since more true
			    de novo junctions will be filtered out. 
    --max-overhang	    Maximum number of overhanging nucleotides allowed near the candidate exon 
			    boundary in junction searches (INT) [ default: 6 ]. After we extend the candidate 
			    exons, we search for splice sites in the overhanging regions around the candidate 
			    exon boundary. 
    --max-gapo		    Maximum number of gap opens (INT) [ default: 1 ].
    --max-gape		    Maximum number of gap extensions, -1 for disabling long gaps (INT)[ default: -1 ]. 
    --indel-end-skip	    In BWT querying, do not put an indel within this number towards the ends 
			    [ default: 5 ].
    --gape-max-occ	    Maximum occurrences for extending a long deletion in BWT querying [ default: 10 ]. 
    --penalty-mismatch	    Mismatch penalty for querying involving BWT [ default: 3 ].
    --penalty-gapo	    Gap open penalty for querying involving BWT [ default: 11 ]
    --penalty-gape	    Gap extension penalty for querying involving BWT [ default: 4 ]
    --log-gap		    log-scaled gap penalty for long deletions for querying involving BWT. 
    --max-entries	    Maximum entries in the queue [2000000]. This number of reads will be loaded into
			    the memory for processing. 
    --none-stop             non-iterative mode: search for all n-difference hits in the BWT query (slooow).
    ======================  =================================================================================

Other useful scripts
---------------------

mergePEsam.pl
^^^^^^^^^^^^^^^^^^^^^

This script can be used to merge SAM format mapping results from paired-end reads. The two ends will be merged according to their distances and orientation. The script requires the two ends come from the same chromosome with proper orientation and the distance between them smaller than the threshold specified by option -d.   

Usage::

	    perl mergePEsam.pl [options] <end1.sam> <end2.sam> <out.sam> 

Arguments:

    =========== ==========================================================================
    Argument	Description
    ===========	==========================================================================
    <end1.sam>	The SAM format output from one end of the reads. 
    <end2.sam>	The SAM format output from the other end of the reads. Please make sure 
		the same lines in end1.sam and end2.sam are corresponded (i.e. from the 
		same read pair ). 
    <out.sam>	The output file. In SAM format.
    ===========	==========================================================================
    
Options:

    ======  ==============================================================================
    Option  Description
    ======  ==============================================================================
    -d	    Maximum distance between the two ends on the reference [ default:5000000 ].
    -v	    Verbose.
    ======  ==============================================================================

xa2multi.pl
^^^^^^^^^^^^^^^^^^^^^

This script can be used to extract all the alignments after the tag "XA" in each line. The current version is from BWA package, to be improved later. 

Usage::
	
	perl xa2multi.pl in.sam >out.sam


sam2bed.pl
^^^^^^^^^^^^^^^^^^^^^

This script converts SAM format output from OLego into BED format file. Only the best alignment (major alignment) of each read will be used. 

Usage::
	
	perl sam2bed.pl [options] <in.sam> <out.bed>

Options:

    ==========  =============================================================================
    Option      Description
    ==========  =============================================================================
    -uniq	Only output uniquely mapped reads. The script identifies unique reads
		by the tag "XT:A:U".
    -v		Verbose.
    ==========  =============================================================================    

Using this script to convert SAM outputs from other programs might cause problems! 


bed2junc.pl
^^^^^^^^^^^^^^^^^^^^^

This script can be used to retrieve unique junctions from BED format file. The number of supporting reads of each junction will be in the score (5th) column. The output file can be used as annotation file for OLego (option -j).

Usage::
	
	    perl bed2junc.pl <in.bed> <out>

Arguments:
    
    ==========  ====================================================================
    Argument	Description
    ==========	====================================================================
    <in.bed>	The input BED file with the mapping results.
    <out>	The output BED format file with the junctions. This file can be directly 
		used as junction annotation file for olego. 
    ==========	====================================================================

regression_model_gen
^^^^^^^^^^^^^^^^^^^^^

This set of scripts can be used to generate the user-defined logistic regression model. 

Usage::

	    perl regression_model_gen/OLego_regression.pl [options]

Options:

	========    ==============================================================
	Option	    Description
	========    ==============================================================
        -g	    The location of the Fasta files downloaded from UCSC genome 
		    browser, the names of the Fasta files should be something 
		    like chr1.fa etc.
        -a	    BED format annotation files for the true transcripts. True 
		    junctions will be extracted from this file. 
        -o	    Output prefix [default: userdefined].
	========    ==============================================================

The model file will be generated in output_prefix.cache, the file name would be output_prefix.cfg. 
				

Additional notes
=====================

File formats
---------------------

SAM format
^^^^^^^^^^^^^^^^^^^^^

OLego outputs the alignments in SAM format (http://samtools.sourceforge.net). Its specification can be found on samtools' website. 

The following tags are used in OLego. Please pay attention to the X? tags, most of them were adopted from BWA, except XS:

    ===	===================================================
    Tag	Meaning
    === ===================================================
    NM	Edit distance
    MD	Mismatching positions/bases
    X0	Number of best hits
    X1	Number of suboptimal hits
    XM	Number of mismatches in the alignment
    XO	Number of gap opens
    XG	Number of gap extentions
    XT	Type: Unique/Repeat
    XA	Alternative hits; format: (chr,pos,CIGAR,NM;)*
    XS	Strand of the query 
    === ===================================================

Addtional scripts have been provided in the package for processing OLego output: sam2bed.pl can be used for conversion from SAM to BED format; xa2multi.pl can extract alignments after XA tags; mergePEsam.pl can merge the two outputs from paired-end RNA-seq data. 

For general processing of SAM files, please check SAMTools. 

junc format
^^^^^^^^^^^^^^^^^^^^^

OLego takes junction annotations in junc (BED) format.
    
    =============   ======  ===================================================
    Column	    Name    Description
    =============   ======  ===================================================
    1		    chrom   The name of the chromosome
    2		    start   The starting position of the junction (intron)
    3		    end	    The ending position of the junction (intron)
    4		    name    Name of the junction
    5		    score   This column is reserved as the score of the junction, 
			    the bed2junc.pl provided in the package will output 
			    evidence number in this column. 
    6		    strand  Strand of the junction
    =============   ======  ===================================================

The score column is not essential.

Examples
=====================

Example pipeline::

    olegoindex -a bwtsw mm9.fa (all chromosomes combined)
    # build your BWT index

    olego -v -s -t 16 -o f.sam ~/mz-local/database/mm9/genome/olego/mm9.fa f.fa
    # do the mapping with single anchor search enabled, with 16 cpu cores, output to f.sam

    olego -v -s -t 16 -o r.sam ~/mz-local/database/mm9/genome/olego/mm9.fa r.fa
    # do the same thing for the other file

    mergePEsam.pl f.sam r.sam merge.sam
    # merge both ends into merge.sam

    sam2bed.pl merge.sam merge.bed
    # convert the SAM file to BED file

    bed2junc.pl merge.bed merge.junc
    # find the junctions in the BED file

    olego -v -s -t 16 -o f.remap.sam -j merge.junc --non-denovo ~/mz-local/database/mm9/genome/olego/mm9.fa f.fa
    olego -v -s -t 16 -o r.remap.sam -j merge.junc --non-denovo ~/mz-local/database/mm9/genome/olego/mm9.fa r.fa
    # do a remapping to rescue more reads, no more de novo mapping here since we already used a junction annotation. 



